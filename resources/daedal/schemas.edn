;; Schemas. Will be reasserted if anything changes.
{:global
 [
  ;; General helper functions
  [{:db/ident :user/attr
    :db/doc "Helper fn for creating attributes. type is a bare keyword like :ref,
            :instant, or :string. options is a map of standard Datomic schema
            attributes to be merged in with defaults (cardinality one, indexed
            false)."
    :db/id #db/id[:db.part/db]
    :db/fn #db/fn{:lang :clojure
                  :params [db ident type options docstring]
                  :code
                  [(merge
                    {:db/id (datomic.api/tempid :db.part/db)
                     :db/doc docstring
                     :db/ident ident
                     :db/valueType (keyword "db.type" (name type))
                     :db/cardinality :db.cardinality/one
                     :db.install/_attribute :db.part/db}
                    options)]}}

   {:db/ident :user/part
    :db/doc "Helper fn for creating partitions."
    :db/id #db/id[:db.part/db]
    :db/fn #db/fn{:lang :clojure
                  :params [db ident docstring]
                  :code
                  [{:db/ident ident
                    :db/doc docstring
                    :db/id (datomic.api/tempid :db.part/db)
                    :db.install/_partition :db.part/db}]}}

   {:db/ident :user/ident
    :db/doc "Helper fn for creating generic entities with keyword identities."
    :db/id #db/id[:db.part/db]
    :db/fn #db/fn{:lang :clojure
                  :params [db ident docstring]
                  :code
                  [{:db/ident ident
                    :db/doc docstring
                    :db/id (datomic.api/tempid :db.part/db)}]}}]

  ;; Transacted schema tracking
  [[:user/part :part/schemas
    "Partition for assertions about which schemas are present."]

   [:user/attr :schema/transacted-schema-id :string
    {:db/unique :db.unique/identity}
    "A unique identifier for a particular version of a particular
  schema. Presence of this datom indicates that the corresponding
  schema is present in the database and need not be reasserted."]]]

 ;; See also codeq:
 ;; https://github.com/Datomic/codeq/blob/master/src/datomic/codeq/core.clj
 :git
 [[{:db/id #db/id[:db.part/db]
    :db/ident :git/type
    :db/valueType :db.type/keyword
    :db/cardinality :db.cardinality/one
    :db/index true
    :db/doc "Type enum for git objects - one of :commit, :tree, :blob, :tag"
    :db.install/_attribute :db.part/db}

   {:db/id #db/id[:db.part/db]
    :db/ident :git/sha
    :db/valueType :db.type/string
    :db/cardinality :db.cardinality/one
    :db/doc "A git sha, should be in repo"
    :db/unique :db.unique/identity
    :db.install/_attribute :db.part/db}

   {:db/id #db/id[:db.part/db]
    :db/ident :repo/commits
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/many
    :db/doc "Associate repo with these git commits"
    :db.install/_attribute :db.part/db}

   {:db/id #db/id[:db.part/db]
    :db/ident :repo/uri
    :db/valueType :db.type/string
    :db/cardinality :db.cardinality/one
    :db/doc "A git repo uri"
    :db/unique :db.unique/identity
    :db.install/_attribute :db.part/db}

   {:db/id #db/id[:db.part/db]
    :db/ident :commit/parents
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/many
    :db/doc "Parents of a commit"
    :db.install/_attribute :db.part/db}

   {:db/id #db/id[:db.part/db]
    :db/ident :commit/tree
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one
    :db/doc "Root node of a commit"
    :db.install/_attribute :db.part/db}

   {:db/id #db/id[:db.part/db]
    :db/ident :commit/message
    :db/valueType :db.type/string
    :db/cardinality :db.cardinality/one
    :db/doc "A commit message"
    :db/fulltext true
    :db.install/_attribute :db.part/db}

   {:db/id #db/id[:db.part/db]
    :db/ident :commit/author
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one
    :db/doc "Person who authored a commit"
    :db.install/_attribute :db.part/db}

   {:db/id #db/id[:db.part/db]
    :db/ident :commit/authoredAt
    :db/valueType :db.type/instant
    :db/cardinality :db.cardinality/one
    :db/doc "Timestamp of authorship of commit"
    :db/index true
    :db.install/_attribute :db.part/db}

   {:db/id #db/id[:db.part/db]
    :db/ident :commit/committer
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one
    :db/doc "Person who committed a commit"
    :db.install/_attribute :db.part/db}

   {:db/id #db/id[:db.part/db]
    :db/ident :commit/committedAt
    :db/valueType :db.type/instant
    :db/cardinality :db.cardinality/one
    :db/doc "Timestamp of commit"
    :db/index true
    :db.install/_attribute :db.part/db}]

  {:db/id #db/id[:db.part/db]
   :db/ident :tree/nodes
   :db/valueType :db.type/ref
   :db/cardinality :db.cardinality/many
   :db/doc "Nodes of a git tree"
   :db.install/_attribute :db.part/db}]}

{:db/id #db/id[:db.part/db]
 :db/ident :node/filename
 :db/valueType :db.type/ref
 :db/cardinality :db.cardinality/one
 :db/doc "filename of a tree node"
 :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
 :db/ident :node/paths
 :db/valueType :db.type/ref
 :db/cardinality :db.cardinality/many
 :db/doc "paths of a tree node"
 :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
 :db/ident :node/object
 :db/valueType :db.type/ref
 :db/cardinality :db.cardinality/one
 :db/doc "Git object (tree/blob) in a tree node"
 :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
 :db/ident :git/prior
 :db/valueType :db.type/ref
 :db/cardinality :db.cardinality/one
 :db/doc "Node containing prior value of a git object"
 :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
 :db/ident :email/address
 :db/valueType :db.type/string
 :db/cardinality :db.cardinality/one
 :db/doc "An email address"
 :db/unique :db.unique/identity
 :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
 :db/ident :file/name
 :db/valueType :db.type/string
 :db/cardinality :db.cardinality/one
 :db/doc "A filename"
 :db/fulltext true
 :db/unique :db.unique/identity
 :db.install/_attribute :db.part/db}
